service: (record {voteTime:nat64; quorum:nat64; contributionTime:nat64}) -> {
    completeDeposit: (text, nat64, nat64, nat64) -> (variant {Ok:record {id:text; status:variant {PaymentPending:text; Completed:text}; depositer:principal; memo:nat64; amount:nat64; paid_at_block:opt nat64}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
    createDepositOrder: (record {amount:nat64}) -> (variant {Ok:record {id:text; status:variant {PaymentPending:text; Completed:text}; depositer:principal; memo:nat64; amount:nat64; paid_at_block:opt nat64}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
    createProposal: (record {title:text; recipient:principal; amount:nat64}) -> (variant {Ok:record {id:int32; title:text; votes:nat64; ends:nat64; recipient:principal; ended:bool; executed:bool; amount:nat64}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
    executeProposal: (record {proposalId:int32}) -> (variant {Ok:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getCanisterAddress: () -> (text) query;
    getDaoData: () -> (variant {Ok:record {voteTime:nat64; availableFunds:nat64; lockedFunds:nat64; nextProposalId:int32; quorum:nat64; totalShares:nat64; contributionEnds:nat64}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}}) query;
    getProposals: () -> (vec record {id:int32; title:text; votes:nat64; ends:nat64; recipient:principal; ended:bool; executed:bool; amount:nat64}) query;
    getUserShares: (record {address:principal}) -> (nat64) query;
    redeemShares: (record {amount:nat64}) -> (variant {Ok:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
    transferShares: (record {to:principal; amount:nat64}) -> (variant {Ok:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
    voteProposal: (record {proposalId:int32}) -> (variant {Ok:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}; Err:variant {CannotVote:text; Failed:text; NotEnough:text; PaymentFailed:text; InvalidPayload:text; NotSet:text; NotFound:text; PaymentCompleted:text; Successful:text}});
}
